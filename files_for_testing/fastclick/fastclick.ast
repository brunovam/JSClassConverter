{
    "type": "Program",
    "body": [
        {
            "type": "EmptyStatement"
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [],
                    "defaults": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "Literal",
                                    "value": "use strict",
                                    "raw": "'use strict'"
                                }
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "FastClick"
                                },
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "layer"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "options"
                                    }
                                ],
                                "defaults": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "oldOnClick"
                                                    },
                                                    "init": null
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "options"
                                                },
                                                "right": {
                                                    "type": "LogicalExpression",
                                                    "operator": "||",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "options"
                                                    },
                                                    "right": {
                                                        "type": "ObjectExpression",
                                                        "properties": []
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "trackingClick"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": false,
                                                    "raw": "false"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "trackingClickStart"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 0,
                                                    "raw": "0"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "targetElement"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "touchStartX"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 0,
                                                    "raw": "0"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "touchStartY"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 0,
                                                    "raw": "0"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "lastTouchIdentifier"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 0,
                                                    "raw": "0"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "touchBoundary"
                                                    }
                                                },
                                                "right": {
                                                    "type": "LogicalExpression",
                                                    "operator": "||",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "options"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "touchBoundary"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 10,
                                                        "raw": "10"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "layer"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "layer"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "tapDelay"
                                                    }
                                                },
                                                "right": {
                                                    "type": "LogicalExpression",
                                                    "operator": "||",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "options"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "tapDelay"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 200,
                                                        "raw": "200"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "tapTimeout"
                                                    }
                                                },
                                                "right": {
                                                    "type": "LogicalExpression",
                                                    "operator": "||",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "options"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "tapTimeout"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 700,
                                                        "raw": "700"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "FastClick"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "notNeeded"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "layer"
                                                    }
                                                ]
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": null
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "FunctionDeclaration",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "bind"
                                            },
                                            "params": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "method"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "context"
                                                }
                                            ],
                                            "defaults": [],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [],
                                                            "defaults": [],
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ReturnStatement",
                                                                        "argument": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "method"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "apply"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "context"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "arguments"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "generator": false,
                                                            "expression": false
                                                        }
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": false
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "methods"
                                                    },
                                                    "init": {
                                                        "type": "ArrayExpression",
                                                        "elements": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "onMouse",
                                                                "raw": "'onMouse'"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "onClick",
                                                                "raw": "'onClick'"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "onTouchStart",
                                                                "raw": "'onTouchStart'"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "onTouchMove",
                                                                "raw": "'onTouchMove'"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "onTouchEnd",
                                                                "raw": "'onTouchEnd'"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "onTouchCancel",
                                                                "raw": "'onTouchCancel'"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "context"
                                                    },
                                                    "init": {
                                                        "type": "ThisExpression"
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "init": {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "l"
                                                        },
                                                        "init": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "methods"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "length"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "l"
                                                }
                                            },
                                            "update": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                },
                                                "prefix": false
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "context"
                                                                },
                                                                "property": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "methods"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    }
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "bind"
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "context"
                                                                        },
                                                                        "property": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "methods"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "i"
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "context"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "deviceIsAndroid"
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "addEventListener"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "mouseover",
                                                                    "raw": "'mouseover'"
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "onMouse"
                                                                    }
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "addEventListener"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "mousedown",
                                                                    "raw": "'mousedown'"
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "onMouse"
                                                                    }
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "addEventListener"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "mouseup",
                                                                    "raw": "'mouseup'"
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "onMouse"
                                                                    }
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "layer"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "addEventListener"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "click",
                                                        "raw": "'click'"
                                                    },
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "onClick"
                                                        }
                                                    },
                                                    {
                                                        "type": "Literal",
                                                        "value": true,
                                                        "raw": "true"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "layer"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "addEventListener"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "touchstart",
                                                        "raw": "'touchstart'"
                                                    },
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "onTouchStart"
                                                        }
                                                    },
                                                    {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "layer"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "addEventListener"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "touchmove",
                                                        "raw": "'touchmove'"
                                                    },
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "onTouchMove"
                                                        }
                                                    },
                                                    {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "layer"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "addEventListener"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "touchend",
                                                        "raw": "'touchend'"
                                                    },
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "onTouchEnd"
                                                        }
                                                    },
                                                    {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "layer"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "addEventListener"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "touchcancel",
                                                        "raw": "'touchcancel'"
                                                    },
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "onTouchCancel"
                                                        }
                                                    },
                                                    {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "Event"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "prototype"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "stopImmediatePropagation"
                                                    }
                                                },
                                                "prefix": true
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "removeEventListener"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "FunctionExpression",
                                                                "id": null,
                                                                "params": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "type"
                                                                    },
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "callback"
                                                                    },
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "capture"
                                                                    }
                                                                ],
                                                                "defaults": [],
                                                                "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "VariableDeclaration",
                                                                            "declarations": [
                                                                                {
                                                                                    "type": "VariableDeclarator",
                                                                                    "id": {
                                                                                        "type": "Identifier",
                                                                                        "name": "rmv"
                                                                                    },
                                                                                    "init": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "Node"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "prototype"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "removeEventListener"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "var"
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "type"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "click",
                                                                                    "raw": "'click'"
                                                                                }
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "rmv"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "call"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "layer"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "type"
                                                                                                },
                                                                                                {
                                                                                                    "type": "LogicalExpression",
                                                                                                    "operator": "||",
                                                                                                    "left": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "callback"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "hijacked"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "callback"
                                                                                                    }
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "capture"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "rmv"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "call"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "layer"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "type"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "callback"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "capture"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "generator": false,
                                                                "expression": false
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "addEventListener"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "FunctionExpression",
                                                                "id": null,
                                                                "params": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "type"
                                                                    },
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "callback"
                                                                    },
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "capture"
                                                                    }
                                                                ],
                                                                "defaults": [],
                                                                "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "VariableDeclaration",
                                                                            "declarations": [
                                                                                {
                                                                                    "type": "VariableDeclarator",
                                                                                    "id": {
                                                                                        "type": "Identifier",
                                                                                        "name": "adv"
                                                                                    },
                                                                                    "init": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "Node"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "prototype"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "addEventListener"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "var"
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "type"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "click",
                                                                                    "raw": "'click'"
                                                                                }
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "adv"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "call"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "layer"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "type"
                                                                                                },
                                                                                                {
                                                                                                    "type": "LogicalExpression",
                                                                                                    "operator": "||",
                                                                                                    "left": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "callback"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "hijacked"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "AssignmentExpression",
                                                                                                        "operator": "=",
                                                                                                        "left": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "callback"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "hijacked"
                                                                                                            }
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "FunctionExpression",
                                                                                                            "id": null,
                                                                                                            "params": [
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "event"
                                                                                                                }
                                                                                                            ],
                                                                                                            "defaults": [],
                                                                                                            "body": {
                                                                                                                "type": "BlockStatement",
                                                                                                                "body": [
                                                                                                                    {
                                                                                                                        "type": "IfStatement",
                                                                                                                        "test": {
                                                                                                                            "type": "UnaryExpression",
                                                                                                                            "operator": "!",
                                                                                                                            "argument": {
                                                                                                                                "type": "MemberExpression",
                                                                                                                                "computed": false,
                                                                                                                                "object": {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "name": "event"
                                                                                                                                },
                                                                                                                                "property": {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "name": "propagationStopped"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "prefix": true
                                                                                                                        },
                                                                                                                        "consequent": {
                                                                                                                            "type": "BlockStatement",
                                                                                                                            "body": [
                                                                                                                                {
                                                                                                                                    "type": "ExpressionStatement",
                                                                                                                                    "expression": {
                                                                                                                                        "type": "CallExpression",
                                                                                                                                        "callee": {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "name": "callback"
                                                                                                                                        },
                                                                                                                                        "arguments": [
                                                                                                                                            {
                                                                                                                                                "type": "Identifier",
                                                                                                                                                "name": "event"
                                                                                                                                            }
                                                                                                                                        ]
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        "alternate": null
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            "generator": false,
                                                                                                            "expression": false
                                                                                                        }
                                                                                                    }
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "capture"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "adv"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "call"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "layer"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "type"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "callback"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "capture"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "generator": false,
                                                                "expression": false
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "layer"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "onclick"
                                                        }
                                                    },
                                                    "prefix": true
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "function",
                                                    "raw": "'function'"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "oldOnClick"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onclick"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "addEventListener"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "click",
                                                                    "raw": "'click'"
                                                                },
                                                                {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "event"
                                                                        }
                                                                    ],
                                                                    "defaults": [],
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "Identifier",
                                                                                        "name": "oldOnClick"
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "event"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "generator": false,
                                                                    "expression": false
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "value": false,
                                                                    "raw": "false"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onclick"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": null,
                                                                "raw": "null"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "deviceIsWindowsPhone"
                                        },
                                        "init": {
                                            "type": "BinaryExpression",
                                            "operator": ">=",
                                            "left": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "navigator"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "userAgent"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "indexOf"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "Windows Phone",
                                                        "raw": "\"Windows Phone\""
                                                    }
                                                ]
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": 0,
                                                "raw": "0"
                                            }
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "deviceIsAndroid"
                                        },
                                        "init": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                                "type": "BinaryExpression",
                                                "operator": ">",
                                                "left": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "navigator"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "userAgent"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "indexOf"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "Android",
                                                            "raw": "'Android'"
                                                        }
                                                    ]
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 0,
                                                    "raw": "0"
                                                }
                                            },
                                            "right": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "deviceIsWindowsPhone"
                                                },
                                                "prefix": true
                                            }
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "deviceIsIOS"
                                        },
                                        "init": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Literal",
                                                        "value": "/iP(ad|hone|od)/",
                                                        "raw": "/iP(ad|hone|od)/",
                                                        "regex": {
                                                            "pattern": "iP(ad|hone|od)",
                                                            "flags": ""
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "test"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "navigator"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "userAgent"
                                                        }
                                                    }
                                                ]
                                            },
                                            "right": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "deviceIsWindowsPhone"
                                                },
                                                "prefix": true
                                            }
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "deviceIsIOS4"
                                        },
                                        "init": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "deviceIsIOS"
                                            },
                                            "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Literal",
                                                        "value": "/OS 4_\\d(_\\d)?/",
                                                        "raw": "/OS 4_\\d(_\\d)?/",
                                                        "regex": {
                                                            "pattern": "OS 4_\\d(_\\d)?",
                                                            "flags": ""
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "test"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "navigator"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "userAgent"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "deviceIsIOSWithBadTarget"
                                        },
                                        "init": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "deviceIsIOS"
                                            },
                                            "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Literal",
                                                        "value": "/OS [6-7]_\\d/",
                                                        "raw": "/OS [6-7]_\\d/",
                                                        "regex": {
                                                            "pattern": "OS [6-7]_\\d",
                                                            "flags": ""
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "test"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "navigator"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "userAgent"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "deviceIsBlackBerry10"
                                        },
                                        "init": {
                                            "type": "BinaryExpression",
                                            "operator": ">",
                                            "left": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "navigator"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "userAgent"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "indexOf"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "BB10",
                                                        "raw": "'BB10'"
                                                    }
                                                ]
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": 0,
                                                "raw": "0"
                                            }
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "needsClick"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "target"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "SwitchStatement",
                                                    "discriminant": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "target"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "nodeName"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "toLowerCase"
                                                            }
                                                        },
                                                        "arguments": []
                                                    },
                                                    "cases": [
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "button",
                                                                "raw": "'button'"
                                                            },
                                                            "consequent": []
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "select",
                                                                "raw": "'select'"
                                                            },
                                                            "consequent": []
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "textarea",
                                                                "raw": "'textarea'"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "target"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "disabled"
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": true,
                                                                                    "raw": "true"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "BreakStatement",
                                                                    "label": null
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "input",
                                                                "raw": "'input'"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "LogicalExpression",
                                                                        "operator": "||",
                                                                        "left": {
                                                                            "type": "LogicalExpression",
                                                                            "operator": "&&",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "deviceIsIOS"
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "target"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "type"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "file",
                                                                                    "raw": "'file'"
                                                                                }
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "target"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "disabled"
                                                                            }
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": true,
                                                                                    "raw": "true"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "BreakStatement",
                                                                    "label": null
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "label",
                                                                "raw": "'label'"
                                                            },
                                                            "consequent": []
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "iframe",
                                                                "raw": "'iframe'"
                                                            },
                                                            "consequent": []
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "video",
                                                                "raw": "'video'"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": true,
                                                                        "raw": "true"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Literal",
                                                                "value": "/\\bneedsclick\\b/",
                                                                "raw": "/\\bneedsclick\\b/",
                                                                "regex": {
                                                                    "pattern": "\\bneedsclick\\b",
                                                                    "flags": ""
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "test"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "target"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "className"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "needsFocus"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "target"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "SwitchStatement",
                                                    "discriminant": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "target"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "nodeName"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "toLowerCase"
                                                            }
                                                        },
                                                        "arguments": []
                                                    },
                                                    "cases": [
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "textarea",
                                                                "raw": "'textarea'"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": true,
                                                                        "raw": "true"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "select",
                                                                "raw": "'select'"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                            "type": "Identifier",
                                                                            "name": "deviceIsAndroid"
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": "input",
                                                                "raw": "'input'"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "SwitchStatement",
                                                                    "discriminant": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "target"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "type"
                                                                        }
                                                                    },
                                                                    "cases": [
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "button",
                                                                                "raw": "'button'"
                                                                            },
                                                                            "consequent": []
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "checkbox",
                                                                                "raw": "'checkbox'"
                                                                            },
                                                                            "consequent": []
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "file",
                                                                                "raw": "'file'"
                                                                            },
                                                                            "consequent": []
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "image",
                                                                                "raw": "'image'"
                                                                            },
                                                                            "consequent": []
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "radio",
                                                                                "raw": "'radio'"
                                                                            },
                                                                            "consequent": []
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "submit",
                                                                                "raw": "'submit'"
                                                                            },
                                                                            "consequent": [
                                                                                {
                                                                                    "type": "ReturnStatement",
                                                                                    "argument": {
                                                                                        "type": "Literal",
                                                                                        "value": false,
                                                                                        "raw": "false"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "LogicalExpression",
                                                                        "operator": "&&",
                                                                        "left": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "!",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "target"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "disabled"
                                                                                }
                                                                            },
                                                                            "prefix": true
                                                                        },
                                                                        "right": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "!",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "target"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "readOnly"
                                                                                }
                                                                            },
                                                                            "prefix": true
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": null,
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Literal",
                                                                                "value": "/\\bneedsfocus\\b/",
                                                                                "raw": "/\\bneedsfocus\\b/",
                                                                                "regex": {
                                                                                    "pattern": "\\bneedsfocus\\b",
                                                                                    "flags": ""
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "test"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "target"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "className"
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "sendClick"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "targetElement"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "event"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "clickEvent"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "touch"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "activeElement"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "document"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "activeElement"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "document"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "activeElement"
                                                                            }
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "blur"
                                                                        }
                                                                    },
                                                                    "arguments": []
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "touch"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "changedTouches"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "clickEvent"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "document"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "createEvent"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "MouseEvents",
                                                                    "raw": "'MouseEvents'"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "clickEvent"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "initMouseEvent"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "determineEventType"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "targetElement"
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": true,
                                                                "raw": "true"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": true,
                                                                "raw": "true"
                                                            },
                                                            {
                                                                "type": "Identifier",
                                                                "name": "window"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": 1,
                                                                "raw": "1"
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "touch"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "screenX"
                                                                }
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "touch"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "screenY"
                                                                }
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "touch"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "clientX"
                                                                }
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "touch"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "clientY"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": null,
                                                                "raw": "null"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "clickEvent"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "forwardedTouchEvent"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": true,
                                                            "raw": "true"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "dispatchEvent"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "clickEvent"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "determineEventType"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "targetElement"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "deviceIsAndroid"
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "tagName"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "toLowerCase"
                                                                    }
                                                                },
                                                                "arguments": []
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "select",
                                                                "raw": "'select'"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": "mousedown",
                                                                    "raw": "'mousedown'"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": "click",
                                                        "raw": "'click'"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "focus"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "targetElement"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "length"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                            "type": "LogicalExpression",
                                                            "operator": "&&",
                                                            "left": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&&",
                                                                "left": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "&&",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "deviceIsIOS"
                                                                    },
                                                                    "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "setSelectionRange"
                                                                        }
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "targetElement"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "type"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "indexOf"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "date",
                                                                                "raw": "'date'"
                                                                            }
                                                                        ]
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "!==",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "targetElement"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "type"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": "time",
                                                                    "raw": "'time'"
                                                                }
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "targetElement"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "month",
                                                                "raw": "'month'"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "length"
                                                                    },
                                                                    "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "targetElement"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "value"
                                                                            }
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "length"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "setSelectionRange"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "length"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "length"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "focus"
                                                                        }
                                                                    },
                                                                    "arguments": []
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "updateScrollParent"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "targetElement"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "scrollParent"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "parentElement"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "scrollParent"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "fastClickScrollParent"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "||",
                                                        "left": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "scrollParent"
                                                            },
                                                            "prefix": true
                                                        },
                                                        "right": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "scrollParent"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "contains"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "targetElement"
                                                                    }
                                                                ]
                                                            },
                                                            "prefix": true
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "parentElement"
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "targetElement"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "DoWhileStatement",
                                                                "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": ">",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parentElement"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "scrollHeight"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parentElement"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "offsetHeight"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "AssignmentExpression",
                                                                                            "operator": "=",
                                                                                            "left": {
                                                                                                "type": "Identifier",
                                                                                                "name": "scrollParent"
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "parentElement"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "AssignmentExpression",
                                                                                            "operator": "=",
                                                                                            "left": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "targetElement"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "fastClickScrollParent"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "parentElement"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        "type": "BreakStatement",
                                                                                        "label": null
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": null
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "parentElement"
                                                                                },
                                                                                "right": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parentElement"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parentElement"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "test": {
                                                                    "type": "Identifier",
                                                                    "name": "parentElement"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "Identifier",
                                                        "name": "scrollParent"
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "scrollParent"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "fastClickLastScrollTop"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "scrollParent"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "scrollTop"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "getTargetElementFromEventTarget"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "eventTarget"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "eventTarget"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "nodeType"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "Node"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "TEXT_NODE"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "eventTarget"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "parentNode"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "eventTarget"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "onTouchStart"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "event"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "touch"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "selection"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "targetTouches"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "length"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": 1,
                                                            "raw": "1"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "targetElement"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "getTargetElementFromEventTarget"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "event"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "target"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "touch"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "targetTouches"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "Identifier",
                                                        "name": "deviceIsIOS"
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "selection"
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "window"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "getSelection"
                                                                            }
                                                                        },
                                                                        "arguments": []
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "&&",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "selection"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "rangeCount"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "selection"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "isCollapsed"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ReturnStatement",
                                                                            "argument": {
                                                                                "type": "Literal",
                                                                                "value": true,
                                                                                "raw": "true"
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": null
                                                            },
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "UnaryExpression",
                                                                    "operator": "!",
                                                                    "argument": {
                                                                        "type": "Identifier",
                                                                        "name": "deviceIsIOS4"
                                                                    },
                                                                    "prefix": true
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "LogicalExpression",
                                                                                "operator": "&&",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "touch"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "identifier"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "===",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "touch"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "identifier"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "ThisExpression"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "lastTouchIdentifier"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "event"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "preventDefault"
                                                                                                }
                                                                                            },
                                                                                            "arguments": []
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        "type": "ReturnStatement",
                                                                                        "argument": {
                                                                                            "type": "Literal",
                                                                                            "value": false,
                                                                                            "raw": "false"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": null
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "ThisExpression"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "lastTouchIdentifier"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "touch"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "identifier"
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "ThisExpression"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "updateScrollParent"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "targetElement"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": null
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClick"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": true,
                                                            "raw": "true"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClickStart"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "event"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "timeStamp"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "targetElement"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "touchStartX"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "touch"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "pageX"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "touchStartY"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "touch"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "pageY"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "<",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "-",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "timeStamp"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "lastClickTime"
                                                                }
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "tapDelay"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "event"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "preventDefault"
                                                                        }
                                                                    },
                                                                    "arguments": []
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": true,
                                                        "raw": "true"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "touchHasMoved"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "event"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "touch"
                                                            },
                                                            "init": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "event"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "changedTouches"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": 0,
                                                                    "raw": "0"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "boundary"
                                                            },
                                                            "init": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "touchBoundary"
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "||",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": ">",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "Math"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "abs"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "-",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "touch"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "pageX"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "touchStartX"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "boundary"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": ">",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "Math"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "abs"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "-",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "touch"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "pageY"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "touchStartY"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "boundary"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "onTouchMove"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "event"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClick"
                                                            }
                                                        },
                                                        "prefix": true
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "||",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "targetElement"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "getTargetElementFromEventTarget"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "event"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "target"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "touchHasMoved"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "trackingClick"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": false,
                                                                        "raw": "false"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": true,
                                                        "raw": "true"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "findControl"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "labelElement"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "labelElement"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "control"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "undefined"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "labelElement"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "control"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "labelElement"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "htmlFor"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "labelElement"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "htmlFor"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "labelElement"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "querySelector"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea",
                                                                "raw": "'button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea'"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "onTouchEnd"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "event"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "forElement"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "trackingClickStart"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "targetTagName"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "scrollParent"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "touch"
                                                            },
                                                            "init": null
                                                        },
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            },
                                                            "init": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "targetElement"
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClick"
                                                            }
                                                        },
                                                        "prefix": true
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "<",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "-",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "timeStamp"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "lastClickTime"
                                                                }
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "tapDelay"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "cancelNextClick"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": true,
                                                                        "raw": "true"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "-",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "timeStamp"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "trackingClickStart"
                                                                }
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "tapTimeout"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "cancelNextClick"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": false,
                                                            "raw": "false"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "lastClickTime"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "event"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "timeStamp"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "trackingClickStart"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClickStart"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClick"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": false,
                                                            "raw": "false"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClickStart"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "Identifier",
                                                        "name": "deviceIsIOSWithBadTarget"
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "touch"
                                                                    },
                                                                    "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "event"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "changedTouches"
                                                                            }
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 0,
                                                                            "raw": "0"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "targetElement"
                                                                    },
                                                                    "right": {
                                                                        "type": "LogicalExpression",
                                                                        "operator": "||",
                                                                        "left": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "document"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "elementFromPoint"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "-",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "touch"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "pageX"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "window"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "pageXOffset"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "-",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "touch"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "pageY"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "window"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "pageYOffset"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "right": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "fastClickScrollParent"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "targetElement"
                                                                            }
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "fastClickScrollParent"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "targetTagName"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "targetElement"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "tagName"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "toLowerCase"
                                                                }
                                                            },
                                                            "arguments": []
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "targetTagName"
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "label",
                                                            "raw": "'label'"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "forElement"
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "findControl"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "targetElement"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "Identifier",
                                                                    "name": "forElement"
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "ThisExpression"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "focus"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "targetElement"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "Identifier",
                                                                                "name": "deviceIsAndroid"
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ReturnStatement",
                                                                                        "argument": {
                                                                                            "type": "Literal",
                                                                                            "value": false,
                                                                                            "raw": "false"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": null
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "targetElement"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "forElement"
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": null
                                                            }
                                                        ]
                                                    },
                                                    "alternate": {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "needsFocus"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "targetElement"
                                                                }
                                                            ]
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "LogicalExpression",
                                                                        "operator": "||",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": ">",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "-",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "event"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "timeStamp"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "trackingClickStart"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": 100,
                                                                                "raw": "100"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "LogicalExpression",
                                                                            "operator": "&&",
                                                                            "left": {
                                                                                "type": "LogicalExpression",
                                                                                "operator": "&&",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "deviceIsIOS"
                                                                                },
                                                                                "right": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "!==",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "window"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "top"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "window"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "targetTagName"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "input",
                                                                                    "raw": "'input'"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "ThisExpression"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "targetElement"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": null,
                                                                                        "raw": "null"
                                                                                    }
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": false,
                                                                                    "raw": "false"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "focus"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "targetElement"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "sendClick"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "targetElement"
                                                                            },
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "event"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "LogicalExpression",
                                                                        "operator": "||",
                                                                        "left": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "!",
                                                                            "argument": {
                                                                                "type": "Identifier",
                                                                                "name": "deviceIsIOS"
                                                                            },
                                                                            "prefix": true
                                                                        },
                                                                        "right": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "!==",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "targetTagName"
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": "select",
                                                                                "raw": "'select'"
                                                                            }
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "ThisExpression"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "targetElement"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": null,
                                                                                        "raw": "null"
                                                                                    }
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "event"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "preventDefault"
                                                                                        }
                                                                                    },
                                                                                    "arguments": []
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": false,
                                                                        "raw": "false"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "deviceIsIOS"
                                                        },
                                                        "right": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "deviceIsIOS4"
                                                            },
                                                            "prefix": true
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "scrollParent"
                                                                    },
                                                                    "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "fastClickScrollParent"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "&&",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "scrollParent"
                                                                    },
                                                                    "right": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "!==",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "scrollParent"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "fastClickLastScrollTop"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "scrollParent"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "scrollTop"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ReturnStatement",
                                                                            "argument": {
                                                                                "type": "Literal",
                                                                                "value": true,
                                                                                "raw": "true"
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": null
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "needsClick"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "targetElement"
                                                                }
                                                            ]
                                                        },
                                                        "prefix": true
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "event"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "preventDefault"
                                                                        }
                                                                    },
                                                                    "arguments": []
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "sendClick"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "event"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "onTouchCancel"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trackingClick"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": false,
                                                            "raw": "false"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": null,
                                                            "raw": "null"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "onMouse"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "event"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "targetElement"
                                                            }
                                                        },
                                                        "prefix": true
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "event"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "forwardedTouchEvent"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "event"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "cancelable"
                                                            }
                                                        },
                                                        "prefix": true
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "||",
                                                        "left": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "needsClick"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "prefix": true
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "cancelNextClick"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "event"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "stopImmediatePropagation"
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "event"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "stopImmediatePropagation"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "event"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "propagationStopped"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": true,
                                                                                    "raw": "true"
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "event"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "stopPropagation"
                                                                        }
                                                                    },
                                                                    "arguments": []
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "event"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "preventDefault"
                                                                        }
                                                                    },
                                                                    "arguments": []
                                                                }
                                                            },
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": false,
                                                                    "raw": "false"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": true,
                                                        "raw": "true"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "onClick"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "event"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "permitted"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "trackingClick"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "trackingClick"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": false,
                                                                        "raw": "false"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "event"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "target"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "submit",
                                                                "raw": "'submit'"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "detail"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "permitted"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onMouse"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "event"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "permitted"
                                                        },
                                                        "prefix": true
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "ThisExpression"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "targetElement"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "permitted"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "FastClick"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "destroy"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "layer"
                                                            },
                                                            "init": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "layer"
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "Identifier",
                                                        "name": "deviceIsAndroid"
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "layer"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "removeEventListener"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "mouseover",
                                                                            "raw": "'mouseover'"
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "onMouse"
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": true,
                                                                            "raw": "true"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "layer"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "removeEventListener"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "mousedown",
                                                                            "raw": "'mousedown'"
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "onMouse"
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": true,
                                                                            "raw": "true"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "layer"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "removeEventListener"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "mouseup",
                                                                            "raw": "'mouseup'"
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "onMouse"
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": true,
                                                                            "raw": "true"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "layer"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "removeEventListener"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "click",
                                                                "raw": "'click'"
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onClick"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": true,
                                                                "raw": "true"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "layer"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "removeEventListener"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "touchstart",
                                                                "raw": "'touchstart'"
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onTouchStart"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "layer"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "removeEventListener"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "touchmove",
                                                                "raw": "'touchmove'"
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onTouchMove"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "layer"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "removeEventListener"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "touchend",
                                                                "raw": "'touchend'"
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onTouchEnd"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "layer"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "removeEventListener"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "touchcancel",
                                                                "raw": "'touchcancel'"
                                                            },
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onTouchCancel"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "FastClick"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "notNeeded"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "layer"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "metaViewport"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "chromeVersion"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "blackberryVersion"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "firefoxVersion"
                                                            },
                                                            "init": null
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                            "type": "UnaryExpression",
                                                            "operator": "typeof",
                                                            "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "window"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "ontouchstart"
                                                                }
                                                            },
                                                            "prefix": true
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "undefined",
                                                            "raw": "'undefined'"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "chromeVersion"
                                                        },
                                                        "right": {
                                                            "type": "UnaryExpression",
                                                            "operator": "+",
                                                            "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "||",
                                                                    "left": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Literal",
                                                                                "value": "/Chrome\\/([0-9]+)/",
                                                                                "raw": "/Chrome\\/([0-9]+)/",
                                                                                "regex": {
                                                                                    "pattern": "Chrome\\/([0-9]+)",
                                                                                    "flags": ""
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "exec"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "navigator"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "userAgent"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "right": {
                                                                        "type": "ArrayExpression",
                                                                        "elements": [
                                                                            null,
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                }
                                                            },
                                                            "prefix": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "Identifier",
                                                        "name": "chromeVersion"
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "Identifier",
                                                                    "name": "deviceIsAndroid"
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "metaViewport"
                                                                                },
                                                                                "right": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "document"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "querySelector"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Literal",
                                                                                            "value": "meta[name=viewport]",
                                                                                            "raw": "'meta[name=viewport]'"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "Identifier",
                                                                                "name": "metaViewport"
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "IfStatement",
                                                                                        "test": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "!==",
                                                                                            "left": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "metaViewport"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "content"
                                                                                                        }
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "indexOf"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Literal",
                                                                                                        "value": "user-scalable=no",
                                                                                                        "raw": "'user-scalable=no'"
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "UnaryExpression",
                                                                                                "operator": "-",
                                                                                                "argument": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 1,
                                                                                                    "raw": "1"
                                                                                                },
                                                                                                "prefix": true
                                                                                            }
                                                                                        },
                                                                                        "consequent": {
                                                                                            "type": "BlockStatement",
                                                                                            "body": [
                                                                                                {
                                                                                                    "type": "ReturnStatement",
                                                                                                    "argument": {
                                                                                                        "type": "Literal",
                                                                                                        "value": true,
                                                                                                        "raw": "true"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "alternate": null
                                                                                    },
                                                                                    {
                                                                                        "type": "IfStatement",
                                                                                        "test": {
                                                                                            "type": "LogicalExpression",
                                                                                            "operator": "&&",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": ">",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "chromeVersion"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 31,
                                                                                                    "raw": "31"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "<=",
                                                                                                "left": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "document"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "documentElement"
                                                                                                        }
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "scrollWidth"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "window"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "outerWidth"
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        "consequent": {
                                                                                            "type": "BlockStatement",
                                                                                            "body": [
                                                                                                {
                                                                                                    "type": "ReturnStatement",
                                                                                                    "argument": {
                                                                                                        "type": "Literal",
                                                                                                        "value": true,
                                                                                                        "raw": "true"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "alternate": null
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": null
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ReturnStatement",
                                                                            "argument": {
                                                                                "type": "Literal",
                                                                                "value": true,
                                                                                "raw": "true"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "Identifier",
                                                        "name": "deviceIsBlackBerry10"
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "blackberryVersion"
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "navigator"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "userAgent"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "match"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "/Version\\/([0-9]*)\\.([0-9]*)/",
                                                                                "raw": "/Version\\/([0-9]*)\\.([0-9]*)/",
                                                                                "regex": {
                                                                                    "pattern": "Version\\/([0-9]*)\\.([0-9]*)",
                                                                                    "flags": ""
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "&&",
                                                                    "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": ">=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "blackberryVersion"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": 10,
                                                                            "raw": "10"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": ">=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "blackberryVersion"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 2,
                                                                                "raw": "2"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": 3,
                                                                            "raw": "3"
                                                                        }
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "metaViewport"
                                                                                },
                                                                                "right": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "document"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "querySelector"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Literal",
                                                                                            "value": "meta[name=viewport]",
                                                                                            "raw": "'meta[name=viewport]'"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "Identifier",
                                                                                "name": "metaViewport"
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "IfStatement",
                                                                                        "test": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "!==",
                                                                                            "left": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "metaViewport"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "content"
                                                                                                        }
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "indexOf"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Literal",
                                                                                                        "value": "user-scalable=no",
                                                                                                        "raw": "'user-scalable=no'"
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "UnaryExpression",
                                                                                                "operator": "-",
                                                                                                "argument": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 1,
                                                                                                    "raw": "1"
                                                                                                },
                                                                                                "prefix": true
                                                                                            }
                                                                                        },
                                                                                        "consequent": {
                                                                                            "type": "BlockStatement",
                                                                                            "body": [
                                                                                                {
                                                                                                    "type": "ReturnStatement",
                                                                                                    "argument": {
                                                                                                        "type": "Literal",
                                                                                                        "value": true,
                                                                                                        "raw": "true"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "alternate": null
                                                                                    },
                                                                                    {
                                                                                        "type": "IfStatement",
                                                                                        "test": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "<=",
                                                                                            "left": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "document"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "documentElement"
                                                                                                    }
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "scrollWidth"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "window"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "outerWidth"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        "consequent": {
                                                                                            "type": "BlockStatement",
                                                                                            "body": [
                                                                                                {
                                                                                                    "type": "ReturnStatement",
                                                                                                    "argument": {
                                                                                                        "type": "Literal",
                                                                                                        "value": true,
                                                                                                        "raw": "true"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "alternate": null
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": null
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": null
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "||",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "layer"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "style"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "msTouchAction"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "none",
                                                                "raw": "'none'"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "layer"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "style"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "touchAction"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "manipulation",
                                                                "raw": "'manipulation'"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "firefoxVersion"
                                                        },
                                                        "right": {
                                                            "type": "UnaryExpression",
                                                            "operator": "+",
                                                            "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "||",
                                                                    "left": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Literal",
                                                                                "value": "/Firefox\\/([0-9]+)/",
                                                                                "raw": "/Firefox\\/([0-9]+)/",
                                                                                "regex": {
                                                                                    "pattern": "Firefox\\/([0-9]+)",
                                                                                    "flags": ""
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "exec"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "navigator"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "userAgent"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "right": {
                                                                        "type": "ArrayExpression",
                                                                        "elements": [
                                                                            null,
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                }
                                                            },
                                                            "prefix": true
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "firefoxVersion"
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": 27,
                                                            "raw": "27"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "metaViewport"
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "document"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "querySelector"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "meta[name=viewport]",
                                                                                "raw": "'meta[name=viewport]'"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "&&",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "metaViewport"
                                                                    },
                                                                    "right": {
                                                                        "type": "LogicalExpression",
                                                                        "operator": "||",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "!==",
                                                                            "left": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "metaViewport"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "content"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "indexOf"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": "user-scalable=no",
                                                                                        "raw": "'user-scalable=no'"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "right": {
                                                                                "type": "UnaryExpression",
                                                                                "operator": "-",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                },
                                                                                "prefix": true
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "<=",
                                                                            "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "document"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "documentElement"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "scrollWidth"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "window"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "outerWidth"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ReturnStatement",
                                                                            "argument": {
                                                                                "type": "Literal",
                                                                                "value": true,
                                                                                "raw": "true"
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": null
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "||",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "layer"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "style"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "touchAction"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "none",
                                                                "raw": "'none'"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "layer"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "style"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "touchAction"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "manipulation",
                                                                "raw": "'manipulation'"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "FastClick"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "attach"
                                        }
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "layer"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "options"
                                            }
                                        ],
                                        "defaults": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "NewExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "FastClick"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "layer"
                                                            },
                                                            {
                                                                "type": "Identifier",
                                                                "name": "options"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false
                                    }
                                }
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "define"
                                                },
                                                "prefix": true
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": "function",
                                                "raw": "'function'"
                                            }
                                        },
                                        "right": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "define"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "amd"
                                                    }
                                                },
                                                "prefix": true
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": "object",
                                                "raw": "'object'"
                                            }
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "define"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "amd"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "define"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [],
                                                        "defaults": [],
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Identifier",
                                                                        "name": "FastClick"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "generator": false,
                                                        "expression": false
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "alternate": {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                            "type": "BinaryExpression",
                                            "operator": "!==",
                                            "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "module"
                                                },
                                                "prefix": true
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": "undefined",
                                                "raw": "'undefined'"
                                            }
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "module"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "exports"
                                            }
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "module"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "exports"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "FastClick"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "attach"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "module"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "exports"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "FastClick"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Identifier",
                                                        "name": "FastClick"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "window"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "FastClick"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Identifier",
                                                        "name": "FastClick"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false
                },
                "arguments": []
            }
        }
    ],
    "sourceType": "script"
}